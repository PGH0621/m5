#!/usr/bin/env python3

from gpiozero import Button
from gpiozero.pins.lgpio import LGPIOFactory
import subprocess
from signal import pause

# Set the pin factory to lgpio
factory = LGPIOFactory()

# Configure button
button = Button(25, pull_up=True, pin_factory=factory)

# GPIO pins for the counter
pins = [15, 18, 23]

# Initialize pins as output and set them to low
for pin in pins:
    subprocess.run(["pinctrl", "set", str(pin), "op"])  # Set pin as output
    subprocess.run(["pinctrl", "set", str(pin), "dl"])  # Set pin to low

# Counter variable
counter = 0

# Function to update GPIO pins based on the counter value
def update_pins():
    global counter
    # Reset all pins to low
    for pin in pins:
        subprocess.run(["pinctrl", "set", str(pin), "dl"])
    
    # Update pins based on the binary representation of the counter
    # Each bit in the counter corresponds to a pin
    if counter & 0b001:  # Check if the least significant bit is 1
        subprocess.run(["pinctrl", "set", str(pins[0]), "dh"])
    if counter & 0b010:  # Check if the second bit is 1
        subprocess.run(["pinctrl", "set", str(pins[1]), "dh"])
    if counter & 0b100:  # Check if the third bit is 1
        subprocess.run(["pinctrl", "set", str(pins[2]), "dh"])

# Function to handle button press
def on_button_press():
    global counter
    counter = (counter + 1) % 8  # Increment counter and wrap around at 8 (3 bits)
    update_pins()  # Update GPIO pins based on the new counter value

# Attach the function to the button press
button.when_pressed = on_button_press

# Keep the program running
pause()